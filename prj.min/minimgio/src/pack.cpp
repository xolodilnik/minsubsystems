/*

Copyright (c) 2011, Smart Engines Limited. All rights reserved.

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of copyright holders.

*/

#include <cstring>

#include "pack.h"

#include <minutils/minerr.h>
#include <minutils/mintyp.h>

#define GETBIT(pLine, x) (((pLine)[(x) >> 3]) & (128 >> ((x) & 7)))
#define SETBIT(pLine, x) (((pLine)[(x) >> 3]) |= (128 >> ((x) & 7)))
#define CLRBIT(pLine, x) (((pLine)[(x) >> 3]) &= (65407 >> ((x) & 7)))
#define INVBIT(pLine, x) (((pLine)[(x) >> 3]) ^= (128 >> ((x) & 7)))

static const uint64_t UNPACK_LUT[] = 
{
  UINT64_C(0x0000000000000000), UINT64_C(0xFF00000000000000), UINT64_C(0x00FF000000000000), UINT64_C(0xFFFF000000000000),
  UINT64_C(0x0000FF0000000000), UINT64_C(0xFF00FF0000000000), UINT64_C(0x00FFFF0000000000), UINT64_C(0xFFFFFF0000000000),
  UINT64_C(0x000000FF00000000), UINT64_C(0xFF0000FF00000000), UINT64_C(0x00FF00FF00000000), UINT64_C(0xFFFF00FF00000000),
  UINT64_C(0x0000FFFF00000000), UINT64_C(0xFF00FFFF00000000), UINT64_C(0x00FFFFFF00000000), UINT64_C(0xFFFFFFFF00000000),
  UINT64_C(0x00000000FF000000), UINT64_C(0xFF000000FF000000), UINT64_C(0x00FF0000FF000000), UINT64_C(0xFFFF0000FF000000),
  UINT64_C(0x0000FF00FF000000), UINT64_C(0xFF00FF00FF000000), UINT64_C(0x00FFFF00FF000000), UINT64_C(0xFFFFFF00FF000000),
  UINT64_C(0x000000FFFF000000), UINT64_C(0xFF0000FFFF000000), UINT64_C(0x00FF00FFFF000000), UINT64_C(0xFFFF00FFFF000000),
  UINT64_C(0x0000FFFFFF000000), UINT64_C(0xFF00FFFFFF000000), UINT64_C(0x00FFFFFFFF000000), UINT64_C(0xFFFFFFFFFF000000),
  UINT64_C(0x0000000000FF0000), UINT64_C(0xFF00000000FF0000), UINT64_C(0x00FF000000FF0000), UINT64_C(0xFFFF000000FF0000),
  UINT64_C(0x0000FF0000FF0000), UINT64_C(0xFF00FF0000FF0000), UINT64_C(0x00FFFF0000FF0000), UINT64_C(0xFFFFFF0000FF0000),
  UINT64_C(0x000000FF00FF0000), UINT64_C(0xFF0000FF00FF0000), UINT64_C(0x00FF00FF00FF0000), UINT64_C(0xFFFF00FF00FF0000),
  UINT64_C(0x0000FFFF00FF0000), UINT64_C(0xFF00FFFF00FF0000), UINT64_C(0x00FFFFFF00FF0000), UINT64_C(0xFFFFFFFF00FF0000),
  UINT64_C(0x00000000FFFF0000), UINT64_C(0xFF000000FFFF0000), UINT64_C(0x00FF0000FFFF0000), UINT64_C(0xFFFF0000FFFF0000),
  UINT64_C(0x0000FF00FFFF0000), UINT64_C(0xFF00FF00FFFF0000), UINT64_C(0x00FFFF00FFFF0000), UINT64_C(0xFFFFFF00FFFF0000),
  UINT64_C(0x000000FFFFFF0000), UINT64_C(0xFF0000FFFFFF0000), UINT64_C(0x00FF00FFFFFF0000), UINT64_C(0xFFFF00FFFFFF0000),
  UINT64_C(0x0000FFFFFFFF0000), UINT64_C(0xFF00FFFFFFFF0000), UINT64_C(0x00FFFFFFFFFF0000), UINT64_C(0xFFFFFFFFFFFF0000),
  UINT64_C(0x000000000000FF00), UINT64_C(0xFF0000000000FF00), UINT64_C(0x00FF00000000FF00), UINT64_C(0xFFFF00000000FF00),
  UINT64_C(0x0000FF000000FF00), UINT64_C(0xFF00FF000000FF00), UINT64_C(0x00FFFF000000FF00), UINT64_C(0xFFFFFF000000FF00),
  UINT64_C(0x000000FF0000FF00), UINT64_C(0xFF0000FF0000FF00), UINT64_C(0x00FF00FF0000FF00), UINT64_C(0xFFFF00FF0000FF00),
  UINT64_C(0x0000FFFF0000FF00), UINT64_C(0xFF00FFFF0000FF00), UINT64_C(0x00FFFFFF0000FF00), UINT64_C(0xFFFFFFFF0000FF00),
  UINT64_C(0x00000000FF00FF00), UINT64_C(0xFF000000FF00FF00), UINT64_C(0x00FF0000FF00FF00), UINT64_C(0xFFFF0000FF00FF00),
  UINT64_C(0x0000FF00FF00FF00), UINT64_C(0xFF00FF00FF00FF00), UINT64_C(0x00FFFF00FF00FF00), UINT64_C(0xFFFFFF00FF00FF00),
  UINT64_C(0x000000FFFF00FF00), UINT64_C(0xFF0000FFFF00FF00), UINT64_C(0x00FF00FFFF00FF00), UINT64_C(0xFFFF00FFFF00FF00),
  UINT64_C(0x0000FFFFFF00FF00), UINT64_C(0xFF00FFFFFF00FF00), UINT64_C(0x00FFFFFFFF00FF00), UINT64_C(0xFFFFFFFFFF00FF00),
  UINT64_C(0x0000000000FFFF00), UINT64_C(0xFF00000000FFFF00), UINT64_C(0x00FF000000FFFF00), UINT64_C(0xFFFF000000FFFF00),
  UINT64_C(0x0000FF0000FFFF00), UINT64_C(0xFF00FF0000FFFF00), UINT64_C(0x00FFFF0000FFFF00), UINT64_C(0xFFFFFF0000FFFF00),
  UINT64_C(0x000000FF00FFFF00), UINT64_C(0xFF0000FF00FFFF00), UINT64_C(0x00FF00FF00FFFF00), UINT64_C(0xFFFF00FF00FFFF00),
  UINT64_C(0x0000FFFF00FFFF00), UINT64_C(0xFF00FFFF00FFFF00), UINT64_C(0x00FFFFFF00FFFF00), UINT64_C(0xFFFFFFFF00FFFF00),
  UINT64_C(0x00000000FFFFFF00), UINT64_C(0xFF000000FFFFFF00), UINT64_C(0x00FF0000FFFFFF00), UINT64_C(0xFFFF0000FFFFFF00),
  UINT64_C(0x0000FF00FFFFFF00), UINT64_C(0xFF00FF00FFFFFF00), UINT64_C(0x00FFFF00FFFFFF00), UINT64_C(0xFFFFFF00FFFFFF00),
  UINT64_C(0x000000FFFFFFFF00), UINT64_C(0xFF0000FFFFFFFF00), UINT64_C(0x00FF00FFFFFFFF00), UINT64_C(0xFFFF00FFFFFFFF00),
  UINT64_C(0x0000FFFFFFFFFF00), UINT64_C(0xFF00FFFFFFFFFF00), UINT64_C(0x00FFFFFFFFFFFF00), UINT64_C(0xFFFFFFFFFFFFFF00),
  UINT64_C(0x00000000000000FF), UINT64_C(0xFF000000000000FF), UINT64_C(0x00FF0000000000FF), UINT64_C(0xFFFF0000000000FF),
  UINT64_C(0x0000FF00000000FF), UINT64_C(0xFF00FF00000000FF), UINT64_C(0x00FFFF00000000FF), UINT64_C(0xFFFFFF00000000FF),
  UINT64_C(0x000000FF000000FF), UINT64_C(0xFF0000FF000000FF), UINT64_C(0x00FF00FF000000FF), UINT64_C(0xFFFF00FF000000FF),
  UINT64_C(0x0000FFFF000000FF), UINT64_C(0xFF00FFFF000000FF), UINT64_C(0x00FFFFFF000000FF), UINT64_C(0xFFFFFFFF000000FF),
  UINT64_C(0x00000000FF0000FF), UINT64_C(0xFF000000FF0000FF), UINT64_C(0x00FF0000FF0000FF), UINT64_C(0xFFFF0000FF0000FF),
  UINT64_C(0x0000FF00FF0000FF), UINT64_C(0xFF00FF00FF0000FF), UINT64_C(0x00FFFF00FF0000FF), UINT64_C(0xFFFFFF00FF0000FF),
  UINT64_C(0x000000FFFF0000FF), UINT64_C(0xFF0000FFFF0000FF), UINT64_C(0x00FF00FFFF0000FF), UINT64_C(0xFFFF00FFFF0000FF),
  UINT64_C(0x0000FFFFFF0000FF), UINT64_C(0xFF00FFFFFF0000FF), UINT64_C(0x00FFFFFFFF0000FF), UINT64_C(0xFFFFFFFFFF0000FF),
  UINT64_C(0x0000000000FF00FF), UINT64_C(0xFF00000000FF00FF), UINT64_C(0x00FF000000FF00FF), UINT64_C(0xFFFF000000FF00FF),
  UINT64_C(0x0000FF0000FF00FF), UINT64_C(0xFF00FF0000FF00FF), UINT64_C(0x00FFFF0000FF00FF), UINT64_C(0xFFFFFF0000FF00FF),
  UINT64_C(0x000000FF00FF00FF), UINT64_C(0xFF0000FF00FF00FF), UINT64_C(0x00FF00FF00FF00FF), UINT64_C(0xFFFF00FF00FF00FF),
  UINT64_C(0x0000FFFF00FF00FF), UINT64_C(0xFF00FFFF00FF00FF), UINT64_C(0x00FFFFFF00FF00FF), UINT64_C(0xFFFFFFFF00FF00FF),
  UINT64_C(0x00000000FFFF00FF), UINT64_C(0xFF000000FFFF00FF), UINT64_C(0x00FF0000FFFF00FF), UINT64_C(0xFFFF0000FFFF00FF),
  UINT64_C(0x0000FF00FFFF00FF), UINT64_C(0xFF00FF00FFFF00FF), UINT64_C(0x00FFFF00FFFF00FF), UINT64_C(0xFFFFFF00FFFF00FF),
  UINT64_C(0x000000FFFFFF00FF), UINT64_C(0xFF0000FFFFFF00FF), UINT64_C(0x00FF00FFFFFF00FF), UINT64_C(0xFFFF00FFFFFF00FF),
  UINT64_C(0x0000FFFFFFFF00FF), UINT64_C(0xFF00FFFFFFFF00FF), UINT64_C(0x00FFFFFFFFFF00FF), UINT64_C(0xFFFFFFFFFFFF00FF),
  UINT64_C(0x000000000000FFFF), UINT64_C(0xFF0000000000FFFF), UINT64_C(0x00FF00000000FFFF), UINT64_C(0xFFFF00000000FFFF),
  UINT64_C(0x0000FF000000FFFF), UINT64_C(0xFF00FF000000FFFF), UINT64_C(0x00FFFF000000FFFF), UINT64_C(0xFFFFFF000000FFFF),
  UINT64_C(0x000000FF0000FFFF), UINT64_C(0xFF0000FF0000FFFF), UINT64_C(0x00FF00FF0000FFFF), UINT64_C(0xFFFF00FF0000FFFF),
  UINT64_C(0x0000FFFF0000FFFF), UINT64_C(0xFF00FFFF0000FFFF), UINT64_C(0x00FFFFFF0000FFFF), UINT64_C(0xFFFFFFFF0000FFFF),
  UINT64_C(0x00000000FF00FFFF), UINT64_C(0xFF000000FF00FFFF), UINT64_C(0x00FF0000FF00FFFF), UINT64_C(0xFFFF0000FF00FFFF),
  UINT64_C(0x0000FF00FF00FFFF), UINT64_C(0xFF00FF00FF00FFFF), UINT64_C(0x00FFFF00FF00FFFF), UINT64_C(0xFFFFFF00FF00FFFF),
  UINT64_C(0x000000FFFF00FFFF), UINT64_C(0xFF0000FFFF00FFFF), UINT64_C(0x00FF00FFFF00FFFF), UINT64_C(0xFFFF00FFFF00FFFF),
  UINT64_C(0x0000FFFFFF00FFFF), UINT64_C(0xFF00FFFFFF00FFFF), UINT64_C(0x00FFFFFFFF00FFFF), UINT64_C(0xFFFFFFFFFF00FFFF),
  UINT64_C(0x0000000000FFFFFF), UINT64_C(0xFF00000000FFFFFF), UINT64_C(0x00FF000000FFFFFF), UINT64_C(0xFFFF000000FFFFFF),
  UINT64_C(0x0000FF0000FFFFFF), UINT64_C(0xFF00FF0000FFFFFF), UINT64_C(0x00FFFF0000FFFFFF), UINT64_C(0xFFFFFF0000FFFFFF),
  UINT64_C(0x000000FF00FFFFFF), UINT64_C(0xFF0000FF00FFFFFF), UINT64_C(0x00FF00FF00FFFFFF), UINT64_C(0xFFFF00FF00FFFFFF),
  UINT64_C(0x0000FFFF00FFFFFF), UINT64_C(0xFF00FFFF00FFFFFF), UINT64_C(0x00FFFFFF00FFFFFF), UINT64_C(0xFFFFFFFF00FFFFFF),
  UINT64_C(0x00000000FFFFFFFF), UINT64_C(0xFF000000FFFFFFFF), UINT64_C(0x00FF0000FFFFFFFF), UINT64_C(0xFFFF0000FFFFFFFF),
  UINT64_C(0x0000FF00FFFFFFFF), UINT64_C(0xFF00FF00FFFFFFFF), UINT64_C(0x00FFFF00FFFFFFFF), UINT64_C(0xFFFFFF00FFFFFFFF),
  UINT64_C(0x000000FFFFFFFFFF), UINT64_C(0xFF0000FFFFFFFFFF), UINT64_C(0x00FF00FFFFFFFFFF), UINT64_C(0xFFFF00FFFFFFFFFF),
  UINT64_C(0x0000FFFFFFFFFFFF), UINT64_C(0xFF00FFFFFFFFFFFF), UINT64_C(0x00FFFFFFFFFFFFFF), UINT64_C(0xFFFFFFFFFFFFFFFF)
};

static const uint64_t UNPACK_LUT_INV[] = 
{
  UINT64_C(0xFFFFFFFFFFFFFFFF), UINT64_C(0x00FFFFFFFFFFFFFF), UINT64_C(0xFF00FFFFFFFFFFFF), UINT64_C(0x0000FFFFFFFFFFFF),
  UINT64_C(0xFFFF00FFFFFFFFFF), UINT64_C(0x00FF00FFFFFFFFFF), UINT64_C(0xFF0000FFFFFFFFFF), UINT64_C(0x000000FFFFFFFFFF),
  UINT64_C(0xFFFFFF00FFFFFFFF), UINT64_C(0x00FFFF00FFFFFFFF), UINT64_C(0xFF00FF00FFFFFFFF), UINT64_C(0x0000FF00FFFFFFFF),
  UINT64_C(0xFFFF0000FFFFFFFF), UINT64_C(0x00FF0000FFFFFFFF), UINT64_C(0xFF000000FFFFFFFF), UINT64_C(0x00000000FFFFFFFF),
  UINT64_C(0xFFFFFFFF00FFFFFF), UINT64_C(0x00FFFFFF00FFFFFF), UINT64_C(0xFF00FFFF00FFFFFF), UINT64_C(0x0000FFFF00FFFFFF),
  UINT64_C(0xFFFF00FF00FFFFFF), UINT64_C(0x00FF00FF00FFFFFF), UINT64_C(0xFF0000FF00FFFFFF), UINT64_C(0x000000FF00FFFFFF),
  UINT64_C(0xFFFFFF0000FFFFFF), UINT64_C(0x00FFFF0000FFFFFF), UINT64_C(0xFF00FF0000FFFFFF), UINT64_C(0x0000FF0000FFFFFF),
  UINT64_C(0xFFFF000000FFFFFF), UINT64_C(0x00FF000000FFFFFF), UINT64_C(0xFF00000000FFFFFF), UINT64_C(0x0000000000FFFFFF),
  UINT64_C(0xFFFFFFFFFF00FFFF), UINT64_C(0x00FFFFFFFF00FFFF), UINT64_C(0xFF00FFFFFF00FFFF), UINT64_C(0x0000FFFFFF00FFFF),
  UINT64_C(0xFFFF00FFFF00FFFF), UINT64_C(0x00FF00FFFF00FFFF), UINT64_C(0xFF0000FFFF00FFFF), UINT64_C(0x000000FFFF00FFFF),
  UINT64_C(0xFFFFFF00FF00FFFF), UINT64_C(0x00FFFF00FF00FFFF), UINT64_C(0xFF00FF00FF00FFFF), UINT64_C(0x0000FF00FF00FFFF),
  UINT64_C(0xFFFF0000FF00FFFF), UINT64_C(0x00FF0000FF00FFFF), UINT64_C(0xFF000000FF00FFFF), UINT64_C(0x00000000FF00FFFF),
  UINT64_C(0xFFFFFFFF0000FFFF), UINT64_C(0x00FFFFFF0000FFFF), UINT64_C(0xFF00FFFF0000FFFF), UINT64_C(0x0000FFFF0000FFFF),
  UINT64_C(0xFFFF00FF0000FFFF), UINT64_C(0x00FF00FF0000FFFF), UINT64_C(0xFF0000FF0000FFFF), UINT64_C(0x000000FF0000FFFF),
  UINT64_C(0xFFFFFF000000FFFF), UINT64_C(0x00FFFF000000FFFF), UINT64_C(0xFF00FF000000FFFF), UINT64_C(0x0000FF000000FFFF),
  UINT64_C(0xFFFF00000000FFFF), UINT64_C(0x00FF00000000FFFF), UINT64_C(0xFF0000000000FFFF), UINT64_C(0x000000000000FFFF),
  UINT64_C(0xFFFFFFFFFFFF00FF), UINT64_C(0x00FFFFFFFFFF00FF), UINT64_C(0xFF00FFFFFFFF00FF), UINT64_C(0x0000FFFFFFFF00FF),
  UINT64_C(0xFFFF00FFFFFF00FF), UINT64_C(0x00FF00FFFFFF00FF), UINT64_C(0xFF0000FFFFFF00FF), UINT64_C(0x000000FFFFFF00FF),
  UINT64_C(0xFFFFFF00FFFF00FF), UINT64_C(0x00FFFF00FFFF00FF), UINT64_C(0xFF00FF00FFFF00FF), UINT64_C(0x0000FF00FFFF00FF),
  UINT64_C(0xFFFF0000FFFF00FF), UINT64_C(0x00FF0000FFFF00FF), UINT64_C(0xFF000000FFFF00FF), UINT64_C(0x00000000FFFF00FF),
  UINT64_C(0xFFFFFFFF00FF00FF), UINT64_C(0x00FFFFFF00FF00FF), UINT64_C(0xFF00FFFF00FF00FF), UINT64_C(0x0000FFFF00FF00FF),
  UINT64_C(0xFFFF00FF00FF00FF), UINT64_C(0x00FF00FF00FF00FF), UINT64_C(0xFF0000FF00FF00FF), UINT64_C(0x000000FF00FF00FF),
  UINT64_C(0xFFFFFF0000FF00FF), UINT64_C(0x00FFFF0000FF00FF), UINT64_C(0xFF00FF0000FF00FF), UINT64_C(0x0000FF0000FF00FF),
  UINT64_C(0xFFFF000000FF00FF), UINT64_C(0x00FF000000FF00FF), UINT64_C(0xFF00000000FF00FF), UINT64_C(0x0000000000FF00FF),
  UINT64_C(0xFFFFFFFFFF0000FF), UINT64_C(0x00FFFFFFFF0000FF), UINT64_C(0xFF00FFFFFF0000FF), UINT64_C(0x0000FFFFFF0000FF),
  UINT64_C(0xFFFF00FFFF0000FF), UINT64_C(0x00FF00FFFF0000FF), UINT64_C(0xFF0000FFFF0000FF), UINT64_C(0x000000FFFF0000FF),
  UINT64_C(0xFFFFFF00FF0000FF), UINT64_C(0x00FFFF00FF0000FF), UINT64_C(0xFF00FF00FF0000FF), UINT64_C(0x0000FF00FF0000FF),
  UINT64_C(0xFFFF0000FF0000FF), UINT64_C(0x00FF0000FF0000FF), UINT64_C(0xFF000000FF0000FF), UINT64_C(0x00000000FF0000FF),
  UINT64_C(0xFFFFFFFF000000FF), UINT64_C(0x00FFFFFF000000FF), UINT64_C(0xFF00FFFF000000FF), UINT64_C(0x0000FFFF000000FF),
  UINT64_C(0xFFFF00FF000000FF), UINT64_C(0x00FF00FF000000FF), UINT64_C(0xFF0000FF000000FF), UINT64_C(0x000000FF000000FF),
  UINT64_C(0xFFFFFF00000000FF), UINT64_C(0x00FFFF00000000FF), UINT64_C(0xFF00FF00000000FF), UINT64_C(0x0000FF00000000FF),
  UINT64_C(0xFFFF0000000000FF), UINT64_C(0x00FF0000000000FF), UINT64_C(0xFF000000000000FF), UINT64_C(0x00000000000000FF),
  UINT64_C(0xFFFFFFFFFFFFFF00), UINT64_C(0x00FFFFFFFFFFFF00), UINT64_C(0xFF00FFFFFFFFFF00), UINT64_C(0x0000FFFFFFFFFF00),
  UINT64_C(0xFFFF00FFFFFFFF00), UINT64_C(0x00FF00FFFFFFFF00), UINT64_C(0xFF0000FFFFFFFF00), UINT64_C(0x000000FFFFFFFF00),
  UINT64_C(0xFFFFFF00FFFFFF00), UINT64_C(0x00FFFF00FFFFFF00), UINT64_C(0xFF00FF00FFFFFF00), UINT64_C(0x0000FF00FFFFFF00),
  UINT64_C(0xFFFF0000FFFFFF00), UINT64_C(0x00FF0000FFFFFF00), UINT64_C(0xFF000000FFFFFF00), UINT64_C(0x00000000FFFFFF00),
  UINT64_C(0xFFFFFFFF00FFFF00), UINT64_C(0x00FFFFFF00FFFF00), UINT64_C(0xFF00FFFF00FFFF00), UINT64_C(0x0000FFFF00FFFF00),
  UINT64_C(0xFFFF00FF00FFFF00), UINT64_C(0x00FF00FF00FFFF00), UINT64_C(0xFF0000FF00FFFF00), UINT64_C(0x000000FF00FFFF00),
  UINT64_C(0xFFFFFF0000FFFF00), UINT64_C(0x00FFFF0000FFFF00), UINT64_C(0xFF00FF0000FFFF00), UINT64_C(0x0000FF0000FFFF00),
  UINT64_C(0xFFFF000000FFFF00), UINT64_C(0x00FF000000FFFF00), UINT64_C(0xFF00000000FFFF00), UINT64_C(0x0000000000FFFF00),
  UINT64_C(0xFFFFFFFFFF00FF00), UINT64_C(0x00FFFFFFFF00FF00), UINT64_C(0xFF00FFFFFF00FF00), UINT64_C(0x0000FFFFFF00FF00),
  UINT64_C(0xFFFF00FFFF00FF00), UINT64_C(0x00FF00FFFF00FF00), UINT64_C(0xFF0000FFFF00FF00), UINT64_C(0x000000FFFF00FF00),
  UINT64_C(0xFFFFFF00FF00FF00), UINT64_C(0x00FFFF00FF00FF00), UINT64_C(0xFF00FF00FF00FF00), UINT64_C(0x0000FF00FF00FF00),
  UINT64_C(0xFFFF0000FF00FF00), UINT64_C(0x00FF0000FF00FF00), UINT64_C(0xFF000000FF00FF00), UINT64_C(0x00000000FF00FF00),
  UINT64_C(0xFFFFFFFF0000FF00), UINT64_C(0x00FFFFFF0000FF00), UINT64_C(0xFF00FFFF0000FF00), UINT64_C(0x0000FFFF0000FF00),
  UINT64_C(0xFFFF00FF0000FF00), UINT64_C(0x00FF00FF0000FF00), UINT64_C(0xFF0000FF0000FF00), UINT64_C(0x000000FF0000FF00),
  UINT64_C(0xFFFFFF000000FF00), UINT64_C(0x00FFFF000000FF00), UINT64_C(0xFF00FF000000FF00), UINT64_C(0x0000FF000000FF00),
  UINT64_C(0xFFFF00000000FF00), UINT64_C(0x00FF00000000FF00), UINT64_C(0xFF0000000000FF00), UINT64_C(0x000000000000FF00),
  UINT64_C(0xFFFFFFFFFFFF0000), UINT64_C(0x00FFFFFFFFFF0000), UINT64_C(0xFF00FFFFFFFF0000), UINT64_C(0x0000FFFFFFFF0000),
  UINT64_C(0xFFFF00FFFFFF0000), UINT64_C(0x00FF00FFFFFF0000), UINT64_C(0xFF0000FFFFFF0000), UINT64_C(0x000000FFFFFF0000),
  UINT64_C(0xFFFFFF00FFFF0000), UINT64_C(0x00FFFF00FFFF0000), UINT64_C(0xFF00FF00FFFF0000), UINT64_C(0x0000FF00FFFF0000),
  UINT64_C(0xFFFF0000FFFF0000), UINT64_C(0x00FF0000FFFF0000), UINT64_C(0xFF000000FFFF0000), UINT64_C(0x00000000FFFF0000),
  UINT64_C(0xFFFFFFFF00FF0000), UINT64_C(0x00FFFFFF00FF0000), UINT64_C(0xFF00FFFF00FF0000), UINT64_C(0x0000FFFF00FF0000),
  UINT64_C(0xFFFF00FF00FF0000), UINT64_C(0x00FF00FF00FF0000), UINT64_C(0xFF0000FF00FF0000), UINT64_C(0x000000FF00FF0000),
  UINT64_C(0xFFFFFF0000FF0000), UINT64_C(0x00FFFF0000FF0000), UINT64_C(0xFF00FF0000FF0000), UINT64_C(0x0000FF0000FF0000),
  UINT64_C(0xFFFF000000FF0000), UINT64_C(0x00FF000000FF0000), UINT64_C(0xFF00000000FF0000), UINT64_C(0x0000000000FF0000),
  UINT64_C(0xFFFFFFFFFF000000), UINT64_C(0x00FFFFFFFF000000), UINT64_C(0xFF00FFFFFF000000), UINT64_C(0x0000FFFFFF000000),
  UINT64_C(0xFFFF00FFFF000000), UINT64_C(0x00FF00FFFF000000), UINT64_C(0xFF0000FFFF000000), UINT64_C(0x000000FFFF000000),
  UINT64_C(0xFFFFFF00FF000000), UINT64_C(0x00FFFF00FF000000), UINT64_C(0xFF00FF00FF000000), UINT64_C(0x0000FF00FF000000),
  UINT64_C(0xFFFF0000FF000000), UINT64_C(0x00FF0000FF000000), UINT64_C(0xFF000000FF000000), UINT64_C(0x00000000FF000000),
  UINT64_C(0xFFFFFFFF00000000), UINT64_C(0x00FFFFFF00000000), UINT64_C(0xFF00FFFF00000000), UINT64_C(0x0000FFFF00000000),
  UINT64_C(0xFFFF00FF00000000), UINT64_C(0x00FF00FF00000000), UINT64_C(0xFF0000FF00000000), UINT64_C(0x000000FF00000000),
  UINT64_C(0xFFFFFF0000000000), UINT64_C(0x00FFFF0000000000), UINT64_C(0xFF00FF0000000000), UINT64_C(0x0000FF0000000000),
  UINT64_C(0xFFFF000000000000), UINT64_C(0x00FF000000000000), UINT64_C(0xFF00000000000000), UINT64_C(0x0000000000000000)
};

int PackLine(uint8_t *pDstLine, const uint8_t *pSrcLine, uint8_t level, size_t count, bool invert)
{
  if (pDstLine == NULL || pSrcLine == NULL)
    return BAD_ARGS;

  if (invert)
  {
    for (size_t x = 0; x < count; x++)
    {
      if (pSrcLine[x] < level)
        SETBIT(pDstLine, x);
      else
        CLRBIT(pDstLine, x);
    }
  }
  else
  {
    for (size_t x = 0; x < count; x++)
    {
      if (pSrcLine[x] < level)
        CLRBIT(pDstLine, x);
      else
        SETBIT(pDstLine, x);
    }
  }

  return NO_ERRORS;
}

int UnpackLine(uint8_t *pDstLine, const uint8_t *pSrcLine, size_t count, bool invert)
{
  if (pDstLine == NULL || pSrcLine == NULL)
    return BAD_ARGS;

  size_t nBytes = count >> 3;
  size_t tail = count & 7;

  const uint64_t *pLUT = invert ? UNPACK_LUT_INV : UNPACK_LUT;

  for (size_t x = 0; x < nBytes; x++)
    memcpy(pDstLine + x * 8, &pLUT[pSrcLine[x]], 8);

  if (tail > 0)
    memcpy(pDstLine + nBytes * 8, &pLUT[pSrcLine[nBytes]], tail);

  return NO_ERRORS;
}

int CopyBits(uint8_t *pDstLine, const uint8_t *pSrcLine, size_t count, bool invert)
{
  if (pDstLine == NULL || pSrcLine == 0)
    return BAD_ARGS;

  size_t nBytes = count >> 3;
  size_t tail = count & 7;

  if (invert)
  {
    for (size_t x = 0; x < nBytes; x++)  
      pDstLine[x] = ~pSrcLine[x];

    for (size_t x = (nBytes << 3); x < count; x++)
    {
      if (GETBIT(pSrcLine, x))
        CLRBIT(pDstLine, x);
      else
        SETBIT(pDstLine, x);
    } 
  }
  else
  {
    for (size_t x = 0; x < nBytes; x++)  
      pDstLine[x] = pSrcLine[x];

    for (size_t x = (nBytes << 3); x < count; x++)
    {
      if (GETBIT(pSrcLine, x))
        SETBIT(pDstLine, x);
      else
        CLRBIT(pDstLine, x);
    }
  }
    
  return NO_ERRORS;
}
